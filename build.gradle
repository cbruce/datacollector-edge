plugins {
    id 'com.github.blindpirate.gogradle' version '0.7.0'
    id 'com.bmuschko.docker-remote-api'  version '3.2.0'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

apply plugin : 'maven-publish'

repositories {
    mavenCentral()
    mavenLocal()
    golang {
        root { it.startsWith('periph.io') }
        url "https://github.com/google/periph"
    }
}

golang {
    packagePath = "${gitPath}"
}

dependencies {
    golang {
        build name: 'github.com/sirupsen/logrus', tag:'v1.0.3'
        build name: 'github.com/AllenDang/w32', commit:'9a4ee0f7d224efbff75947fa7060daadccc4741c'
        build name: 'github.com/BurntSushi/toml', commit:'b26d9c308763d68093482582cea63d69be07a0f0'
        build name: 'github.com/dustin/go-coap', commit:'ddcc80675fa42611359d91a6dfa5aa57fb90e72b'
        build name: 'github.com/eclipse/paho.mqtt.golang', commit:'aff15770515e3c57fc6109da73d42b0d46f7f483'
        build name: 'github.com/gorilla/websocket', commit:'ea4d1f681babbce9545c9c5f3d5194a789c89f5b'
        build name: 'github.com/hpcloud/tail', commit:'a30252cb686a21eb2d0b98132633053ec2f7f1e5'
        build name: 'github.com/julienschmidt/httprouter', commit:'8c199fb6259ffc1af525cc3ad52ee60ba8359669'
        build name: 'github.com/madhukard/govaluate', commit:'13a14e48048d2c8d8cfe616f35dfe6f0b83330fe'
        build name: 'github.com/rcrowley/go-metrics', commit:'1f30fe9094a513ce4c700b9a54458bbb0c96996c'
        build name: 'github.com/satori/go.uuid', commit:'879c5887cd475cd7864858769793b2ceb0d44feb'
        build name: 'periph.io/x/periph', commit: '687bb43ba5ad417371dc0d1a1f7189119aafcede'
    }
}

def getLdFlags() {
    final buildDate=new Date().format("yyyy-MM-dd'T'HHmmss'Z'")
    final buildRepoSha = new ByteArrayOutputStream().withStream { gitShaCmdStream ->
           def result =  exec {
               commandLine 'git', 'rev-parse', 'HEAD'
               standardOutput = gitShaCmdStream
           }
       return gitShaCmdStream.toString().trim()
    }

    final X_CONTAINER_COMMON_PATH = " -X ${gitPath}/container/common"

    "\"" + X_CONTAINER_COMMON_PATH + ".Version=${version}" +
        X_CONTAINER_COMMON_PATH + ".BuiltBy=" + System.properties['user.name'] +
        X_CONTAINER_COMMON_PATH + ".BuiltDate=" + buildDate +
        X_CONTAINER_COMMON_PATH + ".BuiltRepoSha=" + buildRepoSha + "\""
}

def doActionAllPlatforms(action) {
   final targetPlatforms = "${platforms}".split(',')
   targetPlatforms.each{targetPlatform ->
       def (goOs, goArch) = targetPlatform.split('-')
       action(new Tuple2(goOs, goArch))
   }
}

def copyAssetSpec = copySpec {
     from fileTree('.') {
        include('etc/', 'data/', 'QUICKSTART.md')
        exclude('data/**/*.png', 'data/**/*.md')
     }
}

final ldFlags = getLdFlags()

clean {
    delete file('dist')
}

//By default builds for machine's target platforms
build {
    go "build -ldflags " + ldFlags + " -o dist/bin/${binaryName}\${GOEXE} ${gitPath}"

    copy {
        doFirst{
           mkdir 'dist/log'
        }
        with copyAssetSpec
        into 'dist'
    }
}

vet {
    continueWhenFail = true
}

//Custom tasks
task buildAll {
    dependsOn build, check
    description = 'Builds Edge Binaries for all platforms'

    def baseDir = temporaryDir.getAbsolutePath() + '/gobuild'

    //Delete temporary build directory after all builds are done
    doLast{
        delete baseDir
    }

    def buildAndTar = {
        def (goOs, goArch) = it
        def targetPlatform = goOs + '-' + goArch
        def basePlatformDir = baseDir + '/' + goOs + '/' + goArch
        def baseTarDir = basePlatformDir + '/' + appName
        def buildTaskName = 'build-'+ targetPlatform
        def tarTaskName = 'tar-'+ targetPlatform

        //Create Build Task for each platform
        task(buildTaskName, type: com.github.blindpirate.gogradle.Go) {
            dependsOn build
            description = 'Builds Edge Binaries for ' + targetPlatform

            environment.GOOS=goOs
            environment.GOARCH=goArch

            if (goOs.startsWith('windows')) {
                environment.GOEXE='.exe'
            }

            go "build -ldflags " + ldFlags + " -o " + baseTarDir + "/bin/${binaryName}\${GOEXE} ${gitPath}"
        }

        def archiveName = "${appName}-" + "${version}" + '-' + goOs + '-' + goArch

        //Create Tar Task for each platform
        task(tarTaskName, type :Tar) {
            description = 'Packages Edge Binaries for ' + targetPlatform

            //Tar depends on build task for each platform
            dependsOn buildTaskName

            copy {
                doFirst{
                    mkdir baseTarDir + '/log'
                }
                with copyAssetSpec
                into baseTarDir
            }
            baseName = archiveName
            from file(basePlatformDir)
            destinationDir = file('dist')
            extension = 'tgz'
            compression = Compression.GZIP
        }

        //Main buildAll task depends on all of the platform tar tasks
        dependsOn tarTaskName
    }
    doActionAllPlatforms(buildAndTar)
}

publishing {
    publications {
        maven(MavenPublication) {
            def publishArtifact = {
              def (goOs, goArch) = it
              def tarName =  "${appName}-" + "${version}" + '-' + goOs + '-' + goArch  + '.tgz'
              artifact('dist/' + tarName) {
                groupId "com.streamsets"
                artifactId "${appName}"
                extension 'tgz'
                classifier goOs + '-' + goArch
              }
            }
            doActionAllPlatforms(publishArtifact)
        }
    }
    //Configure Publishing repository
    //Need the following env variables MAVEN_REPO, MAVEN_USER, MAVEN_PASSWORD
    def repoUrl = System.env['MAVEN_REPO']
    if (repoUrl != null) {
      repositories {
          maven {
            url repoUrl
            credentials {
                username = System.env['MAVEN_USER']
                password = System.env['MAVEN_PASSWORD']
            }
          }
      }
    }
}

task createDockerfile(type: Dockerfile) {
    description = 'Creates Docker File for Edge'
    dependsOn('tar-linux-amd64')
    destFile = project.file('dist/Dockerfile')
    from 'alpine'
    maintainer 'Madhu "madhu@streamsets.com"'
    runCommand('apk --no-cache update')
    runCommand('apk --no-cache add libc6-compat')
    runCommand('apk --no-cache add file')
    addFile "${appName}*-linux-amd64.tgz", '/'
    defaultCommand '/streamsets-datacollector-edge/bin/edge'
    exposePort 18633
}

docker {
    def dockerCertPath = System.env.DOCKER_CERT_PATH
    if (dockerCertPath != null) {
          url = System.env.DOCKER_HOST
          certPath = new File(dockerCertPath)
    }
}

task buildDockerImage(type: Exec) {
    description = 'Builds Docker Image for Edge'
    dependsOn createDockerfile
    workingDir = "dist"
    commandLine 'docker', 'build', '--no-cache', '-t', "${dockerImageName}:${version}" ,'.'
}

publishToMavenLocal.dependsOn(buildAll)
publish.dependsOn(publishToMavenLocal)

task release {
  description = 'Release task'
  dependsOn buildAll
  dependsOn buildDockerImage
  dependsOn publish
}
